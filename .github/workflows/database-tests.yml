name: database-tests

on:
  workflow_call:
    inputs:
      node-version:
        required: true
        type: string

jobs:
  cockroachdb:
    runs-on: ubuntu-latest

    services:
      cockroachdb:
        image: cockroachdb/cockroach:v24.3.8
        ports:
          - "26257:26257"
        env:
          COCKROACH_ARGS: "start-single-node --insecure --cache=1GB --store=type=mem,size=4GB"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: cp .github/workflows/test/cockroachdb.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: crdb-node:${{ inputs.node-version }}
          parallel: true

  mongodb:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0.12
        ports:
          - "27017:27017"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: cp .github/workflows/test/mongodb.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: mongodb-node:${{ inputs.node-version }}
          parallel: true

  mssql:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mssql-version: ["^9.1.1", "^10.0.1", "^11.0.1"]

    services:
      mssql:
        image: "mcr.microsoft.com/mssql/server:2022-latest"
        ports:
          - "1433:1433"
        env:
          SA_PASSWORD: "Admin12345"
          ACCEPT_EULA: "Y"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: npm install mssql@${{ matrix.mssql-version }}
      - run: cp .github/workflows/test/mssql.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: mssql-node:${{ inputs.node-version }}
          parallel: true

  mysql_mariadb:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7.37
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: "admin"
          MYSQL_USER: "test"
          MYSQL_PASSWORD: "test"
          MYSQL_DATABASE: "test"
      mariadb:
        image: mariadb:10.10.3
        ports:
          - "3307:3306"
        env:
          MYSQL_ROOT_PASSWORD: "admin"
          MYSQL_USER: "test"
          MYSQL_PASSWORD: "test"
          MYSQL_DATABASE: "test"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: cp .github/workflows/test/mysql-mariadb.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: mysql+mariadb-node:${{ inputs.node-version }}
          parallel: true

  better-sqlite3:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: cp .github/workflows/test/better-sqlite3.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: better-sqlite3-node:${{ inputs.node-version }}
          parallel: true

  sqlite:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: cp .github/workflows/test/sqlite.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: sqlite-node:${{ inputs.node-version }}
          parallel: true

  sqljs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: cp .github/workflows/test/sqljs.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: sqljs-node:${{ inputs.node-version }}
          parallel: true

  postgres:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:14-3.3
        ports:
          - "5432:5432"
        env:
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - run: npm i
      - run: cp .github/workflows/test/postgres.ormconfig.json ormconfig.json
      - run: npx nyc npm run test:ci
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: postgres-node:${{ inputs.node-version }}
          parallel: true
